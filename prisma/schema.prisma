// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  username   String     @unique
  email      String     @unique
  passwordHash String
  isAdmin    Boolean    @default(false)
  addresses  Address[]
  orders     Order[]
  reviews    Review[]
  cart       Cart?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String
  price         Float
  categories    CategoryOnProduct[]
  stockQuantity Int
  reviews       Review[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Category {
  id          String            @id @default(uuid())
  name        String
  description String?
  products    CategoryOnProduct[]
}

model CategoryOnProduct {
  productId   String
  categoryId  String
  product     Product   @relation(fields: [productId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Order {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         
  orderItems    OrderItem[]
  totalPrice    Float
  address       Address        @relation(fields: [addressId], references: [id])
  addressId     String         
  paymentDetail PaymentDetail?
  paymentProcessed Boolean     @default(false)
  paidAt        DateTime?
  isDelivered   Boolean        @default(false)
  deliveredAt   DateTime?
  createdAt     DateTime       @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String   
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique 
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  productId String   
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   
}


model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   
  user      User     @relation(fields: [userId], references: [id])
  userId    String   
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Address {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  orders       Order[]
}

model PaymentDetail {
  id            String   @id @default(uuid())  
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique 
  amount        Float
  paymentMethod String
  paymentDate   DateTime
  paymentStatus String
}
